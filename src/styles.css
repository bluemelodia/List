/* Global styles. */

* {
  font-family: "Raleway", sans-serif;
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;

  overflow: hidden;

  /* Hide scrollbar for IE, Edge and Firefox */
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

/* Hide scrollbar for Chrome, Safari and Opera */
body::-webkit-scrollbar {
  display: none;
}

h1 {
  padding: 0;
  margin: 0;
}

h1, h2, h3, h4, h5, h6 {
    margin: 8px 0;
}

button[class="tab-stop"], button[type="button"] {
    border: none;
    background-color: transparent;
}

button[type="submit"] {
  height: 40px;
  margin: 16px 0;
}

input {
  border: 2px solid pink;
  display: inline-block;
  flex: 1;
  font-size: inherit;
  margin: 0 0 8px 0;
  padding: 8px;
}

:focus, :focus-visible, input:focus-visible {
    border: 2px solid red;
    outline-color: red;
}

.full-viewport {
  width: 100vw;
  height: 100vh;
}

.full-screen {
  height: 100%;
  width: 100%;
}

.flex-centered__column {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

/**
* There’s a special case where the min-height of flex items defaults to the content
* size rather than zero. According to the spec, this should only apply when overflow
* is set to visible. For whatever reason, Firefox doesn’t implement it this way 
* (as of 52.0.1 on Mac), and apparently thinks Chrome has it wrong. So for now,
* we have to explicitly set the min height to zero, or else the content will overflow
* its parent even though we’ve set it to scroll. This step needs to be done for every
* flex-item parent all the way up to the outermost flex-box.
*
* Source: https://medium.com/@stephenbunch/how-to-make-a-scrollable-container-with-dynamic-height-using-flexbox-5914a26ae336
*/
.flex-container__dynamic-scroll {
  flex-grow: 1;
  min-height: 0;
}

/* UI elements. */
.app-btn {
  border: none;
  background-color: transparent;
}

/* Hamburger menu. */
.menu-button {
  height: 100%;
  padding: 8px;
}

.menu-button img {
  height: 100%;
}
